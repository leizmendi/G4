Option Compare Database
Option Explicit

Enum PrendaEstado
    Alta
    Lavado
    Planchado
    Empaquetado
    Cliente
    Baja
End Enum

Public Function PEstado_str(iPrendaEstado As PrendaEstado) As String
    Select Case iPrendaEstado
        Case Alta: PEstado_str = "A"
        Case Lavado: PEstado_str = "L"
        Case Planchado: PEstado_str = "P"
        Case Empaquetado: PEstado_str = "E"
        Case Cliente: PEstado_str = "C"
        Case Baja: PEstado_str = "B"
        Case Else: PEstado_str = "?"
    End Select
End Function

Public Function PEstado_num(sDestino As String) As PrendaEstado
    Select Case sDestino
        Case "A": PEstado_num = Alta
        Case "L": PEstado_num = Lavado
        Case "P": PEstado_num = Planchado
        Case "E": PEstado_num = Empaquetado
        Case "C": PEstado_num = Cliente
        Case "B": PEstado_num = Baja
        Case Else: PEstado_num = -1
    End Select
End Function


Public Function DimePrendaTipoMedida(lngIdPrendaTipoMedida As Long _
                          , Optional iSinTipo As Integer = False _
                          , Optional bDimeCodigo As Boolean = False) As String
    On Error GoTo HandleError
    Dim lngIdPrendaTipo As Long, strR As String
    lngIdPrendaTipo = Nz(DLookup("IdPrendaTipo", "tbPrendasTipoMedida", "IdPrendaTipoMedida = " & lngIdPrendaTipoMedida), 0)
    If iSinTipo = False Then strR = Nz(DLookup(IIf(Not bDimeCodigo, "TipoPrenda", "CodTipo"), "tbPrendasTipo", "IdPrendaTipo = " & lngIdPrendaTipo), "?") & " "
    strR = strR & Nz(DLookup("Ancho", "tbPrendasTipoMedida", "IdPrendaTipoMedida = " & lngIdPrendaTipoMedida), "?") & "x" & Nz(DLookup("Largo", "tbPrendasTipoMedida", "IdPrendaTipoMedida = " & lngIdPrendaTipoMedida), "?")
    DimePrendaTipoMedida = strR
    
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Function DimePrendaTipoMedidaRES(lngIdPrendaTipoMedida As Long, Optional iSinTipo As Integer = False) As String
    On Error GoTo HandleError
    Dim strSQL As String, strR As String, rs As Recordset
    strSQL = "SELECT tbPrendasTipo.TipoPrenda, tbPrendasTipoMedida.Subtipo, tbPrendasTipoMedida.AnchoDesde, tbPrendasTipoMedida.AnchoHasta, tbPrendasTipoMedida.Largo" & _
             " FROM tbPrendasTipo INNER JOIN tbPrendasTipoMedida ON tbPrendasTipo.Id = tbPrendasTipoMedida.IdPrendaTipo" & _
             " WHERE tbPrendasTipoMedida.Id=" & lngIdPrendaTipoMedida
    Set rs = CurrentDb.OpenRecordset(strSQL, dbOpenSnapshot)
    If iSinTipo = False Then strR = rs("TipoPrenda") & " "
    If Nz(rs("SubTipo"), "") <> "" Then strR = strR & rs("SubTipo")
    If Nz(rs("AnchoDesde"), "") <> "" Then strR = strR & rs("AnchoDesde")
    If Nz(rs("AnchoHasta"), "") <> "" Then strR = strR & " a " & rs("AnchoHasta")
    If Nz(rs("Largo"), "") <> "" Then strR = strR & "x" & rs("Largo")
    DimePrendaTipoMedidaRES = strR
    
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Function DimeCliente(lngIdCliente As Long) As String
    On Error GoTo HandleError
    Dim strR As String, iTipo As Integer
    iTipo = Nz(DLookup("Tipo", "tbClientes", "IdCliente = " & lngIdCliente), 1)
    If iTipo = 1 Then
        strR = Nz(DLookup("RazonSocial", "tbClientes", "IdCliente = " & lngIdCliente), "¿?")
    Else
        strR = Nz(DLookup("[Nombre] & ' '& [Apellidos]", "tbClientes", "IdCliente = " & lngIdCliente), "¿?")
    End If
    DimeCliente = strR
    
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Sub PonGruposCliente(lngIdCliente As Long)
    On Error GoTo HandleError
    Dim strR As String, strSQL As String, rs As Recordset
    strSQL = "SELECT tbClientesGrupos.GrupoClientes" & _
             " FROM tbClientesGrupos INNER JOIN tbCliente_Grupo ON tbClientesGrupos.IdGrupoClientes = tbCliente_Grupo.IdGrupoClientes" & _
             " WHERE tbCliente_Grupo.IdCliente = " & lngIdCliente & _
             " ORDER BY tbClientesGrupos.Orden;"
    Set rs = CurrentDb.OpenRecordset(strSQL, dbOpenSnapshot)
    While Not rs.EOF
        strR = strR & rs(0) & ", "
        rs.MoveNext
    Wend
    If Len(strR) > 2 Then strR = RecDerTop(strR, 2, 150)
    strSQL = "UPDATE tbClientes SET Grupos = " & ConComillas(strR) & " WHERE IdCliente = " & lngIdCliente
    CurrentDb.Execute strSQL, dbFailOnError
HandleExit:
    Exit Sub
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Sub


Public Function DimeContenidoPack(lngIdPackCab As Long) As String
    On Error GoTo HandleError
    Dim strSQL As String, rs As Recordset, strR As String
    strSQL = "SELECT tbPrendas.IdPrendaTipoMedida, Count(tbPrendas.IdPrenda) AS Cantidad" & _
             " FROM tbPrendas INNER JOIN tbPacksDet ON tbPrendas.IdPrenda = tbPacksDet.IdPrenda" & _
             " WHERE tbPacksDet.IdPackCab = " & lngIdPackCab & _
             " GROUP BY tbPacksDet.IdPackCab, tbPrendas.IdPrendaTipoMedida"
    Set rs = CurrentDb.OpenRecordset(strSQL, dbOpenSnapshot)
    While Not rs.EOF
        strR = strR & " + " & rs("Cantidad") & " " & DimePrendaTipoMedida(rs("IdPrendaTipoMedida"), , True)
        rs.MoveNext
    Wend
    If Len(strR) > 3 Then strR = Mid(strR, 4)
    DimeContenidoPack = strR

HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Sub My2ListGrupoClientes(lngIdCliente As Long)
    On Error GoTo HandleError
    Dim strSQL As String, strSqlAdd As String, strSqlQuit As String, sDisponibles As String, sAsignadas As String
    strSQL = "SELECT tbCliente_Grupo.Id, tbClientesGrupos.GrupoClientes, tbCliente_Grupo.IdGrupoClientes"
    strSQL = strSQL & " FROM tbClientesGrupos INNER JOIN tbCliente_Grupo ON tbClientesGrupos.IdGrupoClientes = tbCliente_Grupo.IdGrupoClientes"
    strSQL = strSQL & " WHERE tbCliente_Grupo.IdCliente=" & lngIdCliente
    'CurrentDb.QueryDefs("qryAsignadas").SQL = strSQL
    sAsignadas = strSQL
    strSQL = "SELECT tbClientesGrupos.IdGrupoClientes, tbClientesGrupos.GrupoClientes"
    strSQL = strSQL & " FROM tbClientesGrupos LEFT JOIN qryAsignadas ON tbClientesGrupos.IdGrupoClientes = qryAsignadas.IdGrupoClientes"
    strSQL = strSQL & " WHERE (((qryAsignadas.IdGrupoClientes) Is Null))"
    strSQL = strSQL & " ORDER BY tbClientesGrupos.Orden;"
    'CurrentDb.QueryDefs("qryDisponibles").SQL = strSQL
    sDisponibles = strSQL
    strSQL = "INSERT INTO tbCliente_Grupo(IdGrupoClientes, IdCliente)"
    strSQL = strSQL & " SELECT <<ItemData>> as IdGrupo, " & lngIdCliente & " as IdEmp"
    strSqlAdd = strSQL
    strSQL = "DELETE * FROM tbCliente_Grupo"
    strSQL = strSQL & " WHERE Id = <<ItemData>>"
    strSqlQuit = strSQL
    MyInput2List sDisponibles, sAsignadas, strSqlAdd, strSqlQuit, "Grupos del Cliente", , , "Grupos de " & DimeCliente(lngIdCliente)
    PonGruposCliente lngIdCliente
    
HandleExit:
    Exit Sub
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Sub

Public Function AddPrenda2Pack(lIdPrenda As Long, lIdPackCab As Long) As Boolean
    On Error GoTo HandleError
    Dim iEstado As PrendaEstado, sSQL As String
    iEstado = PEstado_num(Nz(DLookup("Estado", "tbPrendas", "IdPrenda = " & lIdPrenda), "A"))
    Select Case iEstado
        Case PrendaEstado.Empaquetado
            MsgBox "La prenda se encuentra ya empaquetada, no se puede añadir de nuevo a un pack", vbExclamation
            GoTo HandleExit
        Case PrendaEstado.Baja
            MsgBox "La prenda está dada de baja, no se puede añadir de nuevo a un pack", vbExclamation
            GoTo HandleExit
        Case Cliente
            SetPrendaEstado lIdPrenda, Lavado
    End Select
    sSQL = "INSERT INTO tbPacksDet (IdPackCab, IdPrenda)" & _
           " VALUES (" & lIdPackCab & ", " & lIdPrenda & ")"
    CurrentDb.Execute sSQL, dbFailOnError
    SetPrendaEstado lIdPrenda, Empaquetado, , lIdPackCab
    AddPrenda2Pack = True
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
    
End Function

Public Function SetPrendaEstado(lIdPrenda As Long _
                        , iEstado As PrendaEstado _
                        , Optional dtNow As Date = 0 _
                        , Optional lIdDestino As Long = 0 _
                        , Optional bNoSumarLavado As Boolean = False _
                        , Optional bRestarLavado As Boolean = False) As Boolean
    On Error GoTo HandleError
    Dim sSQL As String, sSQL2 As String, iEstadoActual As PrendaEstado
    If dtNow = 0 Then dtNow = Now()
    iEstadoActual = PEstado_num(Nz(DLookup("Estado", "tbPrendas", "IdPrenda = " & lIdPrenda), "A"))
    sSQL = "UPDATE tbPrendas SET Estado = " & ConComillas(PEstado_str(iEstado), True)
    If (iEstado = Lavado Or iEstado = Planchado) And Not bNoSumarLavado Then
        sSQL = sSQL & ", CantLavados = CantLavados + 1"
        If iEstado = Planchado And iEstadoActual <> Lavado Then
            'Cuando se pasa a estado planchado se debe pasar primero por Lavado
            sSQL2 = "INSERT INTO tbPrendaHis(IdPrenda, Fecha, Estado)" & _
                    " VALUES(" & lIdPrenda & "," & ComaPunto(CDbl(dtNow)) & "," & ConComillas(PEstado_str(PrendaEstado.Lavado), True) & ")"
            CurrentDb.Execute sSQL2, dbFailOnError
        End If
    ElseIf bRestarLavado Then
        sSQL = sSQL & ", CantLavados = CantLavados - 1"
    End If
    sSQL = sSQL & " WHERE IdPrenda = " & lIdPrenda
    CurrentDb.Execute sSQL, dbFailOnError
    sSQL = "INSERT INTO tbPrendaHis(IdPrenda, Fecha, Estado, IdDestino)" & _
            " VALUES(" & lIdPrenda & "," & ComaPunto(CDbl(dtNow)) & "," & ConComillas(PEstado_str(iEstado), True) & "," & IIf(lIdDestino <> 0, lIdDestino, "Null") & ")"
    CurrentDb.Execute sSQL, dbFailOnError
    SetPrendaEstado = True
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
    

End Function

Public Function GeneraQR(sCodigo As String) As Boolean
    On Error GoTo HandleError
    Dim sFileQR As String
    sFileQR = GetCarpetaQR() & NombreFicheroValido(sCodigo) & ".gif"
    qrcodeCreateImage sFileQR, sCodigo
    GeneraQR = Dir(sFileQR) <> ""
HandleExit:
    Exit Function
HandleError:
    MsgBox Err.Description
    Resume HandleExit
End Function

Public Function GetCarpetaQR() As String
    GetCarpetaQR = Nz(GetParam("CarpetaImagenesQR", False), "")
End Function

Public Function GetCarpetaSonidos() As String
    GetCarpetaSonidos = Nz(GetParam("CarpetaSonidos", False), "")
End Function

Public Function DetallePack(lIdPackCab As Long) As String
    'Devuelve string de IdPrendas incuidas en Pack, separadas por |
    Dim rs As Recordset, sR As String
    Set rs = CurrentDb.OpenRecordset("SELECT IdPrenda FROM tbPacksDet WHERE IdPackCab = " & lIdPackCab & " ORDER BY IdPrenda", dbOpenSnapshot)
    sR = "|"
    While Not rs.EOF
        sR = sR & rs("IdPrenda") & "|"
        rs.MoveNext
    Wend
    DetallePack = sR
End Function

Public Function DimeView() As AcView
    DimeView = IIf(Nz(GetParam("ProduccionImprimirTodoEnVistaPreviaSN"), False), acViewPreview, acViewNormal)
End Function